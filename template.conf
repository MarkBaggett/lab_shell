#################################
# Container Base Settings
#################################
ENVIRONMENT="baseimage"
VIRTUSER="root"
CPUSHARES="1024"
MEMORY="256m"
SWAP="266m"
HOSTNAME="labenv"
NETWORK="bridge"
DNS="8.8.8.8"
MOUNT=" \
-v /opt/labs/linuxlab.sh:/root/linuxlab.sh:ro \
-v /opt/labs/linux_status:/root/linux_status \
-v /opt/labs/<<lab>>:/root/<<lab>>:ro"
LOCAL_OPTIONS=""
ENVS="PLAYER_TOKEN"
WORKDIR="/$VIRTUSER"
TIMEOUT="8h"
COMMAND="./linuxlab.sh ./<<lab>>"

REMOVE="True"

TMPFS=" \
--tmpfs /run \
--tmpfs /run/lock \
-v /sys/fs/cgroup:/sys/fs/cgroup:ro"

MOTD=""

#################################
# Ulimit Settings for Containers
#################################
# Formats:
# - soft:hard e.g. ULIMIT_NPROC="1024:2048"
# - soft and hard same value e.g. ULIMIT_NPROC="2048"
ULIMIT_CORE=""            # The maximum size of core files created
ULIMIT_CPU=""             # The maximum amount of cpu time (in seconds)
ULIMIT_DATA=""            # The maximum size of a process's data segment
ULIMIT_FSIZE=""           # The maximum size of files (in bytes) created by the shell
ULIMIT_LOCKS=""           # The maximum number of file locks
ULIMIT_MEMLOCK=""         # The maximum size (in bytes) that may be locked into memory
ULIMIT_MSGQUEUE=""        # The maximum number of bytes in POSIX message queues
ULIMIT_NICE=""            # The maximum scheduling priority ("nice")
ULIMIT_NOFILE=""          # The maximum number of open file descriptors
ULIMIT_NPROC=""           # The maximum number of processes available to a single user
ULIMIT_RSS=""             # The maximum resident set size (in bytes)
ULIMIT_RTPRIO=""          # The maximum real-time scheduling priority
ULIMIT_RTTIME=""          # The maximum amount of cpu time under real time scheduling (in microseconds)
ULIMIT_SIGPENDING=""      # The maximum number of pending signals
ULIMIT_STACK=""           # The maximum stack size (in bytes)

#####################################
# Kernel Capabilities for Containers
#####################################
# Select all
DROP_ALL="no"               # Drop all capabilities (overrides individuals)
ADD_ALL="yes"                # Add all capabilities (overrides individuals)

# Docker defaults (Docker enables these, settings below overides)
CAP_AUDIT_WRITE="yes"        # Write the audit log
CAP_CHOWN="yes"             # Make arbitrary changes to file UIDs and GIDs
CAP_DAC_OVERRIDE="yes"       # Bypass file read, write, and execute permission checks
CAP_FSETID="no"             # Don't clear SUID and SGUID bits when a file is modified, etc.
CAP_FOWNER="yes"             # Set extended file attributes (see chattr(1)) on arbitrary files, ACL's, etc.
CAP_MKNOD="no"              # Create special files using mknod(2)
CAP_NET_RAW="no"            # Use RAW and PACKET sockets
CAP_SETPCAP="no"            # Modify process capabilities
CAP_NET_BIND_SERVICE="no"   # Bind a socket to Internet domain privileged port (port numbers less than 1024)
CAP_SYS_CHROOT="no"         # Use chroot(2)
CAP_KILL="no"               # Bypass permission checks for sending signals
CAP_SETFCAP="yes"           # Set file capabilities (required for setcap use)
CAP_SETUID="yes"            # Make arbitrary manipulations of process UIDs (required for sudo)
CAP_SETGID="yes"            # Make arbitrary manipulations of process GIDs and supplementary GID list (required for sudo)

# Others available (Docker optional not enabled by default)
CAP_AUDIT_CONTROL="no"      # Configure audit subsystem
CAP_AUDIT_READ="no"         # Allow reading the audit log via multicast netlink socket.
CAP_BLOCK_SUSPEND="no"      # Employ features that can block system suspend
CAP_BPF="no"                # Allow creating BPF maps, loading BPF Type Format (BTF) data, retrieve JITed code of BPF programs, and more.
CAP_CHKPOINT_RESTORE="no"   # Allow checkpoint/restore related operations. Introduced in kernel 5.9.
CAP_DAC_READ_SEARCH="no"    # Bypass file read permission & directory read & execute permission checks
CAP_IPC_LOCK="no"           # Lock memory
CAP_IPC_OWNER="no"          # Bypass permission checks for operations on System V IPC objects
CAP_LEASE="no"              # Establish leases on arbitrary files
CAP_LINUX_IMMUTABLE="no"    # Set the FS_APPEND_FL and FS_IMMUTABLE_FL inode flags (see chattr(1))
CAP_MAC_ADMIN="no"          # Configure MAC configuration
CAP_MAC_OVERRIDE="no"       # Ignore kernel MAC policy
CAP_NET_ADMIN="no"          # Configure the network
CAP_NET_BROADCAST="no"      # (Unused)  Make socket broadcasts, and listen to multicasts
CAP_PERFMON="no"            # Allow system performance and observability privileged operations using perf_events, i915_perf and other kernel subsystems
CAP_SYSLOG="no"             # Modify kernel printk behavior
CAP_SYS_ADMIN="no"          # Catch all
CAP_SYS_BOOT="no"           # Use reboot(2) and kexec_load(2)
CAP_SYS_MODULE="no"         # Insert/remove kernel modules
CAP_SYS_PACCT="no"          # Configure process accounting
CAP_SYS_PTRACE="no"         # Trace arbitrary processes using ptrace(2)
CAP_SYS_NICE="no"           # Modify priority of processes
CAP_SYS_RAWIO="no"          # Modify kernel memory
CAP_SYS_RESOURCE="no"       # Override resource limits
CAP_SYS_TIME="no"           # Modify the system clock
CAP_SYS_TTY_CONFIG="no"     # Configure tty devices
CAP_WAKE_ALARM="no"         # Trigger something that will wake up the system