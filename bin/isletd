#!/usr/bin/env bash
# Global Declarations
export TERM="xterm"
CONFIG=LOCATION
. $CONFIG

###################################################
# Error and log - fallback to syslog
# Globals:
#   None
# Arguments:
#   message - Message to write out and log
# Returns:
#   None
###################################################

syslog(){
  local message="$1"
  logger -s -p local0.notice -t "isletd" "$0: $message"
}

###################################################
# Write to islet log file
# Globals:
#   None
# Arguments:
#   message - Message to write out and log
# Returns:
#   None
###################################################

logfile(){
  local message="$1"
  printf "$(date) isletd: $message\n"
}

###################################################
#
# Globals:
#   LOG - Log file for writing
# Arguments:
#   None
# Returns:
#   None
###################################################

enable_logging(){
  if [[ "$LOG" ]]; then
    dirname="$(dirname $LOG)"
    [[ -d "$dirname" ]] || mkdir -p "$dirname"
    [[ -f "$LOG" ]]     || touch "$LOG"
    [[ -w "$LOG" ]] && exec >> "$LOG" || return 1
  else
    return 1
  fi
  return 0
}

###################################################
# Load variables from configuration files
# Globals:
#   CONFIG - Main configuration file
#   LIBISLET - Load library containing functions
#   MODULE - Runtime configuration file
# Arguments:
#   None
# Returns:
#   None
###################################################

load_config(){
  local environment="$1"
  local module
  if [[ -f "$CONFIG" ]]; then
    . "$CONFIG"
    module="$CONFIG_DIR/modules/${MODULE}.conf"
    [[ -f "$LIBISLET" ]]    && . "$LIBISLET"     || logfile "Unable to open $LIBISLET"
    [[ -f "$module" ]]      && . "$module"       || logfile "Unable to open $module"
    [[ -f "$environment" ]] && . "$environment"  || logfile "Unable to open $environment"
    export CONFIG LIBISLET
  else
    logfile "$FUNCNAME: Unable to read $CONFIG"
    return 1
  fi
}

###################################################
# Clean up variables after each iteration
# Globals:
#   Many
# Arguments:
#   None
# Returns:
#   None
###################################################

clear_vars(){
  # Main globals
  unset LIBISLET DB MODULE
  # Cleanup variables
  unset DAYS
}

###################################################
# Remove users older than days
# Globals:
#   DB
# Arguments:
#   days - Value of DAYS, option in config file
# Returns:
#   None
###################################################

cleanup_by_user(){
  local days="$1"
  if file "$DB" 2>/dev/null | grep -q SQLite; then
    sqlite3 "$DB" "pragma foreign_keys = on; DELETE FROM accounts WHERE (strftime('%s','now') - ts) >= (${days}*86400);"
  fi
}

###################################################
# Execute module tasks
# Globals:
#   DEBUG  - Debugging option from configs
# Arguments:
#   module - Path to module script
#   task   - Name of function to execute in module
#   opt    - An option passed to function (optional)
#   env    - Training environment config file
# Returns:
#   None
###################################################

execute_task(){
  local module="$1"
  local task="$2"
  local option="$3"
  local environment="$4"
  "$module" "$task" "$opt" "$env"
  rc="$?"
  [[ "$DEBUG" == "yes" ]] && logfile "Executed $task with status code $rc"
}

###################################################
# Daemonize, run indefinitely every 60 seconds
# Globals:
#   Many
# Arguments:
#   None
# Returns:
#   None
###################################################

main(){
  # We're a daemon, we don't end
  while true; do
    ## Global tasks
    sleep ${INTERVAL:-60} # Default to one minute
    # Remove users which are older than $DAYS days
    [[ "$DAYS" ]] && cleanup_by_user "$DAYS"
    ## Per config tasks
    for environment in $CONFIG_DIR/environments/*.conf $CONFIG_DIR/islet.conf; do
      clear_vars
      if [[ -r "$environment" ]]; then
        # Obtain configurations
        load_config "$environment" || continue
        # Execute cleanup functions from module
        MODULE="$INSTALL_DIR/modules/$MODULE"
        if [[ -x "$MODULE" ]]; then
          # Execute module tasks here
          echo
        else
          logfile "Error: $MODULE does not exist or is not executable, skipping module maintenance."
        fi
      fi
    done
  done
}

trap 'logfile "Stopped: Signal caught"; exit 0' 2 3 15

enable_logging || syslog "Cannot write to ${LOG}, check permissions"
logfile "Started"
main
logfile "Stopped"
