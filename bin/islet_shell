#!/usr/bin/env bash
# Global Declarations
CONFIG=/etc/islet/islet.conf

# Store some stuff, these can be referenced from config files
read CLIENT SRCPORT SERVER DSTPORT <<<"${SSH_CONNECTION}"
export CLIENT SRCPORT SERVER DSTPORT IP="$SERVER"
export SSH_TTY
export DISPLAY="${CLIENT}:0"
export TERM
export PPID HOST_PORT="$PPID"
export TMOUT=60
export CONFIG
readonly CLIENT SRCPORT SERVER DSTPORT SSH_TTY TERM PPID TMOUT

err(){
  local message="$1"
  logger -s -p local0.notice -t "islet" "$0: $message"
  exit 1
}

# Get global variables
if [[ -f "$CONFIG" ]]; then
  . "$CONFIG"
  . "$LIBISLET"
  readonly CONFIG
else
  err "Error: ${CONFIG:-config} or ${LIBISLET:-libislet} not found!"
fi

# Export import_configs function to use in modules
export -f import_configs

# Rewrite MODULE variable for ease of use
MODULE="$INSTALL_DIR/modules/$MODULE" # /opt/islet/modules/docker

clear

#######################################
# Create SQLite database
# Globals:
#   DB   - Location of database file
#   USER - Owner of database file
#   GROUP - Group of database file
# Arguments:
#   None
# Returns:
#   None
#######################################

create_db() {
sqlite3 "$DB" <<EOF
PRAGMA foreign_keys = ON;
CREATE TABLE accounts (
        user VARCHAR PRIMARY KEY,
        ts TIMESTAMP
);
CREATE TABLE environments (
        user VARCHAR REFERENCES accounts(user) ON DELETE CASCADE,
        environment VARCHAR
);
CREATE UNIQUE INDEX idx_environments_user_environment ON environments(user, environment);
EOF
return 0
}

is_sqlite() {
  local file="$(which sqlite3)"
  [[ -f "$file" ]] || quit "Fatal: sqlite3 not found, is it installed and in the PATH?"
  if ! file "$DB" 2>/dev/null | grep -q SQLite; then
    rm -f "$DB" 2>/dev/null
    create_db
    test $? -eq 0 && return 0 || quit "Unable to create $DB"
  fi
}

###################################################
# Handles db entires for container reattachment
# Globals:
#   None
# Arguments:
#   None
# Returns:
#   None
###################################################

identify(){
  auth=$(sqlite3 $DB "SELECT user FROM accounts WHERE user='$USER';")
  if [[ "$auth" ]]
  then
  	log "${USER}: Account already exists"
  else
  	sqlite3 "$DB" "pragma foreign_keys = on; INSERT INTO accounts VALUES('"${USER}"', strftime('%s', 'now'));" 2>/dev/null || quit "Couldn't write to $DB!"
  	log "${USER}: Account created from $CLIENT"
  fi
}

connect(){

  case $LAB in

    L1)
      SELECTION="tcpdump"
      ;;
    L2)
      SELECTION="tcpdump"
      ;;
    L3)
      SELECTION="tcpdump"
      ;;
    L4)
      SELECTION="tcpdump"
      ;;
    L5)
      SELECTION="tcpdump"
      ;;
    L6)
      SELECTION="tcpdump"
      ;;
    *)
      echo -n "You have reached the end of the internet...you have seen all there is to see...please go back...now"
      exit
      ;;
  esac

  CONFIGURATION="environments/${SELECTION}.conf"

  if [[ $ACT == "START" ]]; then
    if [[ -f "$CONFIG_DIR/$CONFIGURATION" ]]; then
        . "$CONFIG_DIR/$CONFIGURATION" # /etc/islet + / + environments/blah.conf
        # Export for use in docker module
        BASE=$(basename $(basename $CONFIGURATION) .conf)
        export CONFIGURATION  # environments/blah.conf
        export BASE           # blah
      else
        alert "Something went wrong! Ask instructor for assistance."
        exit
    fi

    attach=$(sqlite3 $DB "SELECT environment FROM environments WHERE user='$USER' AND environment='$BASE'";)
    if [[ $attach ]]; then
      $MODULE attach # Call function in docker module to attach to existing environment
    else
      $MODULE start  # Call function in docker module to create environment
    fi

  elif [[ $ACT == "DELETE" ]]; then
  #check if container exists else exit
    sqlite3 "$DB" "pragma foreign_keys = on; DELETE FROM environments WHERE user='$USER' AND environment='$SELECTION';"
    $SUDO_DOCKER docker stop "${SELECTION}.$USER" 2>&1 > /dev/null
    $SUDO_DOCKER docker rm "${SELECTION}.$USER" 2>&1 > /dev/null
  else
    echo "Hmmm intresting choice...."
    exit
  fi
}

trap 'echo; quit "Trap received, exiting..."' 1 2 3 20
is_sqlite
$MODULE verify
identify
connect
exit