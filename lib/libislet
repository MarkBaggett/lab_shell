#!/usr/bin/env bash
SPACER1="---------------"
SPACER2="               "

normal="$(tput sgr0)"
bold="$(tput bold)"
underline="$(tput smul)"
yellow="$(tput setaf 3)"
blackf="$(tput setaf 0)"
blackb="$(tput setab 0)"
redf="$(tput setaf 1)"
redb="$(tput setab 1)"
greenf="$(tput setaf 2)"
greenb="$(tput setab 2)"
bluef="$(tput setaf 4)"
blueb="$(tput setab 4)"
magentaf="$(tput setaf 5)"
magentab="$(tput setab 5)"
cyanf="$(tput setaf 6)"
cyanb="$(tput setab 6)"
whitef="$(tput setaf 7)"
whiteb="$(tput setab 7)"
hidecursor="$(tput civis -- invisible)"
showcursor="$(tput cnorm -- normal)"
clearline="$(tput el)"

N="${normal}"
B="${bold}"
U="${underline}"
Y="${yellow}"
BLF="${blackf}"
BLB="${blackb}"
RF="${redf}"
RB="${redb}"
GF="${greenf}"
GB="${greenb}"
BF="${bluef}"
BB="${blueb}"
MF="${magentaf}"
MB="${magentab}"
CF="${cyanf}"
CB="${cyanb}"
WF="${whitef}"
WB="${whiteb}"
HC="${hidecursor}"
SC="${showcursor}"
CL="${clearline}"

#######################################
# Print text in specific color
# Globals:
#   Color codes
# Arguments:
#   String of characters
# Returns:
#   Message in color
#######################################

red()     { alert; }
yellow()  { notice; }
magenta() { info; }
alert()   { printf "${redf}$*${normal}\n" >&2; }
notice()  { printf "${yellow}$*${normal}\n"; }
info()    { printf "${magentaf}$*${normal}\n"; }
ask()     { printf "${whitef}$*${normal}"; }
mention() { printf "${whitef}$*${normal}\n"; }

#########################################
# Accept user input with options
# Globals:
#   None
# Arguments:
#   var    - User input will be stored in its value
#   secret - Whether input will be echo'd back
#   opt1   - Optional argument of options to present to user
#   opt2   - Optional argument of options to present to user
# Returns:
#   None
#############################################################

prompt(){
  local argc="$#"
  local var="$1"
  local secret="$2"

  if [[ "$argc" > 2 ]]; then
    local opt1="$3"
    local opt2="$4"
    if [[ $opt2 ]]; then
      local options="${Y}[${N}${BF}$opt1${N}${Y}/${N}${BF}$opt2${N}${Y}]${N}: "
    else
      local options="${Y}[${N}${BF}$opt1${N}${Y}]${N}: "
    fi
  fi

  if [[ "$secret" != "secret" ]]; then
    read -e -r -p "$options" "$var"
  else
    read -s -e -r -p "$options" "$var"
  fi
}

#########################################
# Print, log, and exit script for errors
# Globals:
#   None
# Arguments:
#   String of text indicating issue
# Returns:
#   Red text and exits 1
##########################################

quit(){ local message="$1"; alert "${message:-Exiting session!}"; log "$message"; exit 1; }

######################################################
# Color message MOTD from ISLET config yellow
# Globals:
#   MOTD      - Message of the day string from config
# Arguments:
#   String of text
# Returns:
#   Yellow text
######################################################

message(){ local message="$1"; echo; echo "$message"; notice "$MOTD"; echo; }

######################################################
# Sanitize input by removing special characters and
# symbols. Used to normalize usernames and passwords
# Globals:
#  None
# Arguments:
#   String of text, either username or password
# Returns:
#   Sanitized string
######################################################

sanitize(){ local item="$1"; echo "${item//[^a-zA-Z0-9]/}"; }

#########################################################
# Check exit code of last command
# Globals:
#  None
# Arguments:
#   String of text
# Returns:
#   If true, calls quit which exits 1 after log and error
#########################################################

did_it_work() { test "$?" -ne 0 && quit "$1"; }

#######################################
# Print ISLET banner
# Globals:
#   Color codes
# Arguments:
#   None
# Returns:
#   Text of ISLET banner
#######################################

islet_banner(){
printf "${hidecursor}"
cat <<EOF
${MF}===============================================================${N}

${MF}===============================================================${N}
EOF
printf "${showcursor}"
}

#######################################
# Log message to syslog daemon
# Globals:
#   None
# Arguments:
#  String of message to log
# Returns:
#   None
#######################################

log(){
  local message=$(echo "$1" | sed -e 's/\\n/ /g' -e 's/\\t/ /g' -e 's/\\r/ /g')
  logger -p local0.notice -t "islet" "$0: $message"
}

#######################################
# Countdown and exit if 0 is reached
# Globals:
#   None
# Arguments:
#   Integer in seconds to begin count
# Returns:
#   Message to stdout on failure
#######################################

timecount(){
  printf "${hidecursor}"
  countdown="$1"
  while [ $countdown -ge 0 ]
  do
     printf "${Y}.${N}${RF}.${N}${BF}.${N}Press any key to continue or ^C to exit${Y}.${N}${RF}.${N}${BF}.${N}${Y} ${countdown}${N}${CL}\r"
     read -rs -n1 -t1 key && printf "${showcursor}" && return
     let countdown--
  done
  echo
  quit "Session ended due to inactivity"
}

#######################################
# Checks if previous command timesout
# Globals:
#   None
# Arguments:
#   String of message
# Returns:
#   Message to stdout in red
#######################################

is_timeout(){ test "$?" -eq 124 && quit "$1"; }

#######################################
# Checks if debug mode is on and prints
# and logs message if on.
# Globals:
#   DEBUG   - from ISLET config files
# Arguments:
#   String of message
# Returns:
#   Message to stdout in red
#######################################

is_debug(){
  local message="$1"
  if [[ "$DEBUG" == "yes" ]]; then
    INFOLEVEL=""
    alert "$message"
    log "$message"
  else
    INFOLEVEL="2>/dev/null"
  fi
}

######################################
# Get global variables when available
# Globals:
#   None
# Arguments:
#   None
# Returns:
#   Message to stdout on failure
######################################

import_configs(){
  if [[ -f "$CONFIG" ]]; then
    . "$CONFIG"
    . "$LIBISLET"
  else
    quit "Error: ${CONFIG:-config} or ${LIBISLET:-libislet} not found!"
  fi

  if [[ -f "$CONFIG_DIR/modules/${MODULE}.conf" ]]; then
    . "$CONFIG_DIR/modules/${MODULE}.conf"
  else
    quit "Error: ${MODULE:-module} config not found!"
  fi

  if [[ -f "$CONFIG_DIR/$CONFIGURATION" ]]; then
    . "$CONFIG_DIR/${CONFIGURATION}"
  fi
}
